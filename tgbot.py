import asyncio

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from config import TOKEN

import codecs
import json
import markup as menu
import async_rabota_ua
import async_work_ua
import DB_worker

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

closeMenu = types.ReplyKeyboardRemove()

# all_vac = async_work_ua.get_all_vacancies("Python Developer", "–•–∞—Ä—å–∫–æ–≤", "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞")

main_all_vac = []
counter = 0
main_user_id = 0
main_search_words = ""
parsing_finished = False


def show_vacancies(arg_counter):
    arg_counter * 5


class SearchVacs(StatesGroup):
    srch = State()


class ChangeCity(StatesGroup):
    city = State()


class ChangeEmp(StatesGroup):
    emp = State()


# def city_check(temp_var):
#     async_work_ua.get_all_vacancies("Python Developer", "–•–∞—Ä—å–∫–æ–≤", "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
#     # temp_var = temp_var.lower().title()
#     # with codecs.open("all_city_names.json", "r", encoding='utf-8') as data_file:
#     #     data = json.load(data_file)
#     #     if temp_var in data.keys() or temp_var in data.values():
#     #         return True
#     # return False


@dp.message_handler(commands='start')
async def start_mes(message: types.Message):
    DB_worker.create_db_and_table(DB_worker.name_bd)
    DB_worker.delete_data(DB_worker.name_bd)
    DB_worker.save_data(DB_worker.name_bd, message.from_user.id)
    global main_user_id
    main_user_id = message.from_user.id
    await bot.send_message(message.from_user.id, f"–ó–¥—Ä–∞—Å—Ç–≤—É–π, {message.from_user.first_name}!\n"
                                                 "–ï—Å–ª–∏ —Ç—ã –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É, –∑–Ω–∞—á–∏—Ç —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                                                 "–±—ã—Å—Ç—Ä–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ: "
                                                 "–ò—Å–∫–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å—Ä–∞–∑—É –∏ –≤—ã–¥–∞–≤–∞—Ç—å —ç—Ç–æ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∫ —Ç–æ–º—É –∂–µ —Å–æ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–µ–ª–æ)"
                                                 "–ò—Å–∫–∞—Ç—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–≥–æ—Ä–æ–¥, –∑–∞–Ω—è—Ç–æ—Å—Ç—å) –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –∏–ª–∏ –≤–æ–≤—Å–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
                           reply_markup=menu.mainMenu)


@dp.message_handler()
async def bot_mes(message: types.Message):
    if message.text == "üîé–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ãüîé":
        await SearchVacs.srch.set()
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", reply_markup=closeMenu)
    elif message.text == "üí¨–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ 10üí¨":
        global counter
        print(counter)
        await bot.send_message(message.from_user.id, "–°–∞–π—Ç rabota.ua", reply_markup=menu.Search)
        if (counter + 1) * 5 < len(main_all_vac[0]):
            for temp in main_all_vac[0][counter * 5:(counter + 1) * 5]:
                await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
        elif (counter + 1) * 5 > len(main_all_vac[0]) > counter * 5:
            for temp in main_all_vac[0][counter * 5:]:
                await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
        else:
            await bot.send_message(message.from_user.id, "–í–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç (rabota.ua)", reply_markup=menu.Search)

        await bot.send_message(message.from_user.id, "–°–∞–π—Ç www.work.ua", reply_markup=menu.Search)
        if (counter + 1) * 5 < len(main_all_vac[1]):
            for temp in main_all_vac[1][counter * 5:(counter + 1) * 5]:
                await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
        elif (counter + 1) * 5 > len(main_all_vac[1]) > counter * 5:
            for temp in main_all_vac[1][counter * 5:]:
                await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
        else:
            await bot.send_message(message.from_user.id, "–í–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç (work.ua)", reply_markup=menu.Search)
        counter += 1

    elif message.text == "üìÉ–ü–æ–º–æ—â—åüìÉ":
        await bot.send_message(message.from_user.id,
                               "–ù–∞—à –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –Ø–ü Python. "
                               "–ë–æ—Ç –ø–æ–∫–∞ —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ–≥–æ –¥–≤–∞ —Å–∞–π—Ç–∞, –Ω–æ —É–∂–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –¥–æ–≤–æ–ª—å–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ."
                               "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ \"–∏—Å–∫–∞—Ç—å\" –±–æ—Ç —Å—Ä–∞–∑—É –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–∞—Ö."
                               "–í–∞–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å —á—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ –±—ã—Å—Ç—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å), –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤–æ–æ–±—â–µ–º "
                               "–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç 2-3 —Å–µ–∫—É–Ω–¥ –¥–æ 8 (—á—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω–æ —Ä–µ–¥–∫–æ, —á–∞—â–µ –≤—Å–µ–≥–æ 3-4 —Å–µ–∫—É–Ω–¥—ã)",
                               reply_markup=menu.mainMenu)

    elif message.text == "‚öô–ü–æ–∫–∞–∑–∞—Ç—å/–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ‚öô":
        arg_data = DB_worker.get_data(DB_worker.name_bd, message.from_user.id)[0]
        print(arg_data)
        await bot.send_message(message.from_user.id, f"–í–∞—à –≥–æ—Ä–æ–¥ : {arg_data[1]}\n–í–∞—à–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å: {arg_data[2]}",
                               reply_markup=menu.changeInfo)

    elif message.text == "–ú–æ–π –≥–æ—Ä–æ–¥":
        await ChangeCity.city.set()
        await bot.send_message(message.from_user.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º\n"
                               "(–í–≤–µ–¥–∏—Ç–µ \"–£–∫—Ä–∞–∏–Ω–∞\", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ)",
                               reply_markup=closeMenu)

    elif message.text == "–í–∏–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏":
        await ChangeEmp.emp.set()
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
                               reply_markup=menu.EmpType)


    elif message.text == "–ú–µ–Ω—é":
        await bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é",
                               reply_markup=menu.mainMenu)


@dp.message_handler(state=ChangeCity.city)
async def bot_city(message: types.Message, state: FSMContext):
    DB_worker.update_city_name(DB_worker.name_bd, message.from_user.id, message.text.lower().title())
    print(DB_worker.get_data(DB_worker.name_bd))
    await state.finish()
    await bot.send_message(message.from_user.id,
                           "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                           reply_markup=menu.changeInfo)


@dp.message_handler(state=ChangeEmp.emp)
async def bot_emp(message: types.Message, state: FSMContext):
    arg_answer = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)"
    if message.text in ["–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–ù–µ–ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"]:
        DB_worker.update_busyness(DB_worker.name_bd, message.from_user.id, message.text)
        arg_answer = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"

    print(DB_worker.get_data(DB_worker.name_bd))
    print(message.text)
    await bot.send_message(message.from_user.id, arg_answer, reply_markup=menu.changeInfo)
    await state.finish()


@dp.message_handler(state=SearchVacs.srch)
async def bot_search(message: types.Message, state: FSMContext):
    global main_all_vac
    global main_search_words
    global counter
    counter = 0
    main_all_vac = []
    all_rabota_ua_vacs = []
    all_work_ua_ua_vacs = []
    arg_data = DB_worker.get_data(DB_worker.name_bd, main_user_id)
    temp_arg_city_name = ""
    temp_arg_busyness = ""
    if len(arg_data) and arg_data[0][1] is not None and arg_data[0][2] is not None:
        temp_arg_city_name = arg_data[0][1]
        temp_arg_busyness = arg_data[0][2]
    main_search_words = message.text
    print(main_search_words.strip(),
          temp_arg_city_name,
          temp_arg_busyness)
    await bot.send_message(message.from_user.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", reply_markup=menu.Search)
    await async_rabota_ua.gather_all_vacancies(all_rabota_ua_vacs, main_search_words.strip(),
                                               temp_arg_city_name,
                                               temp_arg_busyness)
    await async_work_ua.gather_all_vacancies(all_work_ua_ua_vacs, main_search_words.strip(), temp_arg_city_name,
                                             temp_arg_busyness)
    main_all_vac.append(all_rabota_ua_vacs)
    main_all_vac.append(all_work_ua_ua_vacs)
    await state.finish()

    print(main_all_vac)
    print(len(main_all_vac[0]), len(main_all_vac[1]))
    await bot.send_message(message.from_user.id, "–°–∞–π—Ç rabota.ua", reply_markup=menu.Search)
    if (counter + 1) * 5 < len(main_all_vac[0]):
        for temp in main_all_vac[0][counter * 5:(counter + 1) * 5]:
            await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
    elif (counter + 1) * 5 > len(main_all_vac[0]) > counter * 5:
        for temp in main_all_vac[0][counter * 5:]:
            await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
    else:
        await bot.send_message(message.from_user.id, "–í–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç (rabota.ua)", reply_markup=menu.Search)

    await bot.send_message(message.from_user.id, "–°–∞–π—Ç work.ua", reply_markup=menu.Search)
    if (counter + 1) * 5 < len(main_all_vac[1]):
        for temp in main_all_vac[1][counter * 5:(counter + 1) * 5]:
            await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
    elif (counter + 1) * 5 > len(main_all_vac[1]) > counter * 5:
        for temp in main_all_vac[1][counter * 5:]:
            await bot.send_message(message.from_user.id, temp, reply_markup=menu.Search)
    else:
        await bot.send_message(message.from_user.id, "–í–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç (work.ua)", reply_markup=menu.Search)
    counter += 1


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
